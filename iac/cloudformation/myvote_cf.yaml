AWSTemplateFormatVersion: "2010-09-09"
Metadata:
    Generator: "former2"
Description: ""
Resources:
    LambdaFunction:
        Type: "AWS::Lambda::Function"
        Properties:
            Description: ""
            Environment: 
                Variables: 
                    dynamodb_field: "vote"
                    dynamodb_table_name: !Ref DynamoDBTable
                    region: !Ref AWS::Region
                    dynamodb_partition_key: "voter"
                    sqs_queue_name: !GetAtt SQSQueue.QueueName
            FunctionName: "vote_processor"
            Handler: "vote_processor.lambda_handler"
            Architectures: 
              - "x86_64"
            Code: 
                S3Bucket: !Sub "awslambda-${AWS::Region}-tasks"
                S3Key: !Sub "/snapshots/${AWS::AccountId}/vote_processor-4e2e5552-d68b-4a62-aa32-17b8c89ed94f"
                S3ObjectVersion: "98kvx29S.A2m9IIOMsFWol_I7ZMo62O1"
            MemorySize: 128
            Role: !GetAtt IAMRole18.Arn
            Runtime: "python3.9"
            Timeout: 3
            TracingConfig: 
                Mode: "PassThrough"
            EphemeralStorage: 
                Size: 512

    LambdaFunction2:
        Type: "AWS::Lambda::Function"
        Properties:
            Description: ""
            Environment: 
                Variables: 
                    dynamodb_field: "vote"
                    dynamodb_table_name: !Ref DynamoDBTable
                    dynamodb_partition_key: "voter"
            FunctionName: "results"
            Handler: "result.lambda_handler"
            Architectures: 
              - "x86_64"
            Code: 
                S3Bucket: !Sub "awslambda-${AWS::Region}-tasks"
                S3Key: !Sub "/snapshots/${AWS::AccountId}/results-19ef2c58-9888-4b43-8307-5d605cfe1884"
                S3ObjectVersion: "6MxiN_XOt2HHBH59JQAXqO.9f1CjLWXz"
            MemorySize: 128
            Role: !GetAtt IAMRole19.Arn
            Runtime: "python3.9"
            Timeout: 3
            TracingConfig: 
                Mode: "PassThrough"
            EphemeralStorage: 
                Size: 512

    LambdaFunction3:
        Type: "AWS::Lambda::Function"
        Properties:
            Description: ""
            Environment: 
                Variables: 
                    SNS_ARN: !Ref SNSTopic
                    def_region: !Ref AWS::Region
            FunctionName: "voting"
            Handler: "voting.lambda_handler"
            Architectures: 
              - "x86_64"
            Code: 
                S3Bucket: !Sub "awslambda-${AWS::Region}-tasks"
                S3Key: !Sub "/snapshots/${AWS::AccountId}/voting-253e2825-7061-4c93-913a-74c6ec60e3ff"
                S3ObjectVersion: "QWW5u4iw7pYZipTFWN5t.2wERZNIwbpX"
            MemorySize: 128
            Role: !GetAtt IAMRole17.Arn
            Runtime: "python3.9"
            Timeout: 3
            TracingConfig: 
                Mode: "PassThrough"
            EphemeralStorage: 
                Size: 512

    LambdaPermission:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:InvokeFunction"
            FunctionName: !GetAtt LambdaFunction2.Arn
            Principal: "apigateway.amazonaws.com"
            SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayV2Api}/*/*/${LambdaFunction2}"

    LambdaPermission2:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:InvokeFunction"
            FunctionName: !GetAtt LambdaFunction3.Arn
            Principal: "apigateway.amazonaws.com"
            SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayV2Api}/*/*/${LambdaFunction3}"

    LambdaEventSourceMapping:
        Type: "AWS::Lambda::EventSourceMapping"
        Properties:
            BatchSize: 1
            EventSourceArn: !Ref SQSQueue
            FunctionName: !GetAtt LambdaFunction.Arn
            Enabled: true
            MaximumBatchingWindowInSeconds: 0

    LambdaEventInvokeConfig:
        Type: "AWS::Lambda::EventInvokeConfig"
        Properties:
            DestinationConfig: 
                OnSuccess: 
                    Destination: !Ref SNSTopic
                OnFailure: {}
            FunctionName: !Ref LambdaFunction3
            MaximumRetryAttempts: 2
            Qualifier: "$LATEST"

    S3Bucket:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: !Sub "frontend-bucket-erjan-result-${AWS::Region}"
            WebsiteConfiguration: 
                IndexDocument: "index.html"

    S3Bucket2:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: !Sub "frontend-bucket-erjan-vote-${AWS::Region}"
            WebsiteConfiguration: 
                IndexDocument: "index.html"

    S3BucketPolicy:
        Type: "AWS::S3::BucketPolicy"
        Properties:
            Bucket: !Ref S3Bucket2
            PolicyDocument: 
                Version: "2012-10-17"
                Statement: 
                  - 
                    Sid: "PublicReadGetObject"
                    Effect: "Allow"
                    Principal: "*"
                    Action: "s3:GetObject"
                    Resource: !Sub "arn:aws:s3:::${S3Bucket2}/*"
                  - 
                    Sid: ""
                    Effect: "Allow"
                    Principal: 
                        AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontCloudFrontOriginAccessIdentity2}"
                    Action: "s3:GetObject"
                    Resource: !Sub "arn:aws:s3:::${S3Bucket2}/*"

    S3BucketPolicy2:
        Type: "AWS::S3::BucketPolicy"
        Properties:
            Bucket: !Ref S3Bucket
            PolicyDocument: 
                Version: "2012-10-17"
                Statement: 
                  - 
                    Sid: "PublicReadGetObject"
                    Effect: "Allow"
                    Principal: "*"
                    Action: "s3:GetObject"
                    Resource: !Sub "arn:aws:s3:::${S3Bucket}/*"
                  - 
                    Sid: ""
                    Effect: "Allow"
                    Principal: 
                        AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontCloudFrontOriginAccessIdentity}"
                    Action: "s3:GetObject"
                    Resource: !Sub "arn:aws:s3:::${S3Bucket}/*"

    DynamoDBTable:
        Type: "AWS::DynamoDB::Table"
        Properties:
            AttributeDefinitions: 
              - 
                AttributeName: "voter"
                AttributeType: "S"
            BillingMode: "PAY_PER_REQUEST"
            TableName: "votes"
            KeySchema: 
              - 
                AttributeName: "voter"
                KeyType: "HASH"
            StreamSpecification: 
                StreamViewType: "NEW_AND_OLD_IMAGES"

    CloudFrontDistribution:
        Type: "AWS::CloudFront::Distribution"
        Properties:
            DistributionConfig: 
                Origins: 
                  - 
                    ConnectionAttempts: 3
                    ConnectionTimeout: 10
                    DomainName: !Sub "${S3Bucket}.s3.${AWS::Region}.amazonaws.com"
                    Id: !Ref S3Bucket
                    OriginPath: ""
                    S3OriginConfig: 
                        OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontCloudFrontOriginAccessIdentity}"
                DefaultCacheBehavior: 
                    AllowedMethods: 
                      - "HEAD"
                      - "GET"
                      - "OPTIONS"
                    CachedMethods: 
                      - "HEAD"
                      - "GET"
                      - "OPTIONS"
                    Compress: false
                    DefaultTTL: 0
                    ForwardedValues: 
                        Cookies: 
                            Forward: "none"
                        QueryString: false
                    MaxTTL: 0
                    MinTTL: 0
                    SmoothStreaming: false
                    TargetOriginId: !Ref S3Bucket
                    ViewerProtocolPolicy: "allow-all"
                Comment: "RESULT"
                PriceClass: "PriceClass_All"
                Enabled: true
                ViewerCertificate: 
                    CloudFrontDefaultCertificate: true
                    MinimumProtocolVersion: "TLSv1"
                    SslSupportMethod: "vip"
                Restrictions: 
                    GeoRestriction: 
                        RestrictionType: "none"
                HttpVersion: "http2"
                DefaultRootObject: "index.html"
                IPV6Enabled: false

    CloudFrontDistribution2:
        Type: "AWS::CloudFront::Distribution"
        Properties:
            DistributionConfig: 
                Origins: 
                  - 
                    ConnectionAttempts: 3
                    ConnectionTimeout: 10
                    DomainName: !Sub "${S3Bucket2}.s3.${AWS::Region}.amazonaws.com"
                    Id: !Ref S3Bucket2
                    OriginPath: ""
                    S3OriginConfig: 
                        OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontCloudFrontOriginAccessIdentity2}"
                DefaultCacheBehavior: 
                    AllowedMethods: 
                      - "HEAD"
                      - "GET"
                      - "OPTIONS"
                    CachedMethods: 
                      - "HEAD"
                      - "GET"
                      - "OPTIONS"
                    Compress: false
                    DefaultTTL: 0
                    ForwardedValues: 
                        Cookies: 
                            Forward: "none"
                        QueryString: false
                    MaxTTL: 0
                    MinTTL: 0
                    SmoothStreaming: false
                    TargetOriginId: !Ref S3Bucket2
                    ViewerProtocolPolicy: "allow-all"
                Comment: "VOTE"
                PriceClass: "PriceClass_All"
                Enabled: true
                ViewerCertificate: 
                    CloudFrontDefaultCertificate: true
                    MinimumProtocolVersion: "TLSv1"
                    SslSupportMethod: "vip"
                Restrictions: 
                    GeoRestriction: 
                        RestrictionType: "none"
                HttpVersion: "http2"
                DefaultRootObject: "index.html"
                IPV6Enabled: false

    CloudFrontCloudFrontOriginAccessIdentity:
        Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
        Properties:
            CloudFrontOriginAccessIdentityConfig: 
                Comment: "frontend_result origin"

    CloudFrontCloudFrontOriginAccessIdentity2:
        Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
        Properties:
            CloudFrontOriginAccessIdentityConfig: 
                Comment: "frontend_vote origin"

    CloudFrontCachePolicy:
        Type: "AWS::CloudFront::CachePolicy"
        Properties:
            CachePolicyConfig: 
                Name: "cloudfront_result_cache_policy"
                DefaultTTL: 86400
                MaxTTL: 31536000
                MinTTL: 1
                ParametersInCacheKeyAndForwardedToOrigin: 
                    EnableAcceptEncodingGzip: true
                    EnableAcceptEncodingBrotli: true
                    CookiesConfig: 
                        CookieBehavior: "none"
                    HeadersConfig: 
                        HeaderBehavior: "whitelist"
                        Headers: 
                          - "origin"
                          - "access-control-request-headers"
                          - "access-control-request-method"
                    QueryStringsConfig: 
                        QueryStringBehavior: "none"

    CloudFrontCachePolicy2:
        Type: "AWS::CloudFront::CachePolicy"
        Properties:
            CachePolicyConfig: 
                Name: "cloudfront_vote_cache_policy"
                DefaultTTL: 86400
                MaxTTL: 31536000
                MinTTL: 1
                ParametersInCacheKeyAndForwardedToOrigin: 
                    EnableAcceptEncodingGzip: true
                    EnableAcceptEncodingBrotli: true
                    CookiesConfig: 
                        CookieBehavior: "none"
                    HeadersConfig: 
                        HeaderBehavior: "whitelist"
                        Headers: 
                          - "origin"
                          - "access-control-request-headers"
                          - "access-control-request-method"
                    QueryStringsConfig: 
                        QueryStringBehavior: "none"

    CloudFrontOriginRequestPolicy:
        Type: "AWS::CloudFront::OriginRequestPolicy"
        Properties:
            OriginRequestPolicyConfig: 
                Name: "cloudfront_result_origin_request_policy"
                HeadersConfig: 
                    HeaderBehavior: "none"
                CookiesConfig: 
                    CookieBehavior: "none"
                QueryStringsConfig: 
                    QueryStringBehavior: "none"

    CloudFrontOriginRequestPolicy2:
        Type: "AWS::CloudFront::OriginRequestPolicy"
        Properties:
            OriginRequestPolicyConfig: 
                Name: "cloudfront_vote_origin_request_policy"
                HeadersConfig: 
                    HeaderBehavior: "none"
                CookiesConfig: 
                    CookieBehavior: "none"
                QueryStringsConfig: 
                    QueryStringBehavior: "none"

    CloudFrontResponseHeadersPolicy:
        Type: "AWS::CloudFront::ResponseHeadersPolicy"
        Properties:
            ResponseHeadersPolicyConfig: 
                CorsConfig: 
                    AccessControlAllowCredentials: false
                    AccessControlAllowHeaders: 
                        Items: 
                          - "*"
                    AccessControlAllowMethods: 
                        Items: 
                          - "POST"
                          - "GET"
                          - "HEAD"
                          - "PATCH"
                          - "DELETE"
                          - "OPTIONS"
                          - "PUT"
                    AccessControlAllowOrigins: 
                        Items: 
                          - "*"
                    AccessControlExposeHeaders: 
                        Items: 
                          - "*"
                    OriginOverride: false
                Name: "cloudfront_vote_response_headers_policy"

    CloudFrontResponseHeadersPolicy2:
        Type: "AWS::CloudFront::ResponseHeadersPolicy"
        Properties:
            ResponseHeadersPolicyConfig: 
                CorsConfig: 
                    AccessControlAllowCredentials: false
                    AccessControlAllowHeaders: 
                        Items: 
                          - "*"
                    AccessControlAllowMethods: 
                        Items: 
                          - "POST"
                          - "GET"
                          - "HEAD"
                          - "PATCH"
                          - "DELETE"
                          - "OPTIONS"
                          - "PUT"
                    AccessControlAllowOrigins: 
                        Items: 
                          - "*"
                    AccessControlExposeHeaders: 
                        Items: 
                          - "*"
                    OriginOverride: false
                Name: "cloudfront_result_response_headers_policy"

    ApiGatewayV2Integration:
        Type: "AWS::ApiGatewayV2::Integration"
        Properties:
            ApiId: !Ref ApiGatewayV2Api
            ConnectionType: "INTERNET"
            IntegrationMethod: "POST"
            IntegrationType: "AWS_PROXY"
            IntegrationUri: !GetAtt LambdaFunction3.Arn
            TimeoutInMillis: 30000
            PayloadFormatVersion: "2.0"

    ApiGatewayV2Integration2:
        Type: "AWS::ApiGatewayV2::Integration"
        Properties:
            ApiId: !Ref ApiGatewayV2Api
            ConnectionType: "INTERNET"
            IntegrationMethod: "POST"
            IntegrationType: "AWS_PROXY"
            IntegrationUri: !GetAtt LambdaFunction2.Arn
            TimeoutInMillis: 30000
            PayloadFormatVersion: "2.0"

    ApiGatewayV2Api:
        Type: "AWS::ApiGatewayV2::Api"
        Properties:
            ApiKeySelectionExpression: "$request.header.x-api-key"
            ProtocolType: "HTTP"
            RouteSelectionExpression: "$request.method $request.path"
            CorsConfiguration: 
                AllowCredentials: false
                AllowHeaders: 
                  - "accept"
                  - "content-type"
                AllowMethods: 
                  - "POST"
                  - "OPTIONS"
                  - "GET"
                AllowOrigins: 
                  - !Sub "https://${CloudFrontDistribution2.DomainName}"
                  - !Sub "https://${CloudFrontDistribution.DomainName}"
                MaxAge: 0
            DisableExecuteApiEndpoint: false

    ApiGatewayV2Stage:
        Type: "AWS::ApiGatewayV2::Stage"
        Properties:
            StageName: "$default"
            StageVariables: {}
            ApiId: !Ref ApiGatewayV2Api
            DeploymentId: "cir6pp"
            RouteSettings: {}
            DefaultRouteSettings: 
                DetailedMetricsEnabled: false
            AutoDeploy: true

    ApiGatewayV2Deployment:
        Type: "AWS::ApiGatewayV2::Deployment"
        Properties:
            ApiId: !Ref ApiGatewayV2Api
            Description: "Automatic deployment triggered by changes to the Api configuration"

    ApiGatewayV2Deployment2:
        Type: "AWS::ApiGatewayV2::Deployment"
        Properties:
            ApiId: !Ref ApiGatewayV2Api
            Description: "Automatic deployment triggered by changes to the Api configuration"

    ApiGatewayV2Route:
        Type: "AWS::ApiGatewayV2::Route"
        Properties:
            ApiId: !Ref ApiGatewayV2Api
            ApiKeyRequired: false
            AuthorizationType: "NONE"
            RouteKey: !Sub "POST /${LambdaFunction3}"
            Target: !Sub "integrations/${ApiGatewayV2Integration}"

    ApiGatewayV2Route2:
        Type: "AWS::ApiGatewayV2::Route"
        Properties:
            ApiId: !Ref ApiGatewayV2Api
            ApiKeyRequired: false
            AuthorizationType: "NONE"
            RouteKey: !Sub "GET /${LambdaFunction2}"
            Target: !Sub "integrations/${ApiGatewayV2Integration2}"

    SNSTopic:
        Type: "AWS::SNS::Topic"
        Properties:
            DisplayName: ""
            TopicName: "erjan_sns"

    SNSTopicPolicy:
        Type: "AWS::SNS::TopicPolicy"
        Properties:
            PolicyDocument: !Sub "{\"Version\":\"2012-10-17\",\"Id\":\"__default_policy_ID\",\"Statement\":[{\"Sid\":\"__default_statement_ID\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"*\"},\"Action\":[\"SNS:Subscribe\",\"SNS:SetTopicAttributes\",\"SNS:RemovePermission\",\"SNS:Publish\",\"SNS:ListSubscriptionsByTopic\",\"SNS:GetTopicAttributes\",\"SNS:DeleteTopic\",\"SNS:AddPermission\"],\"Resource\":\"${SNSTopic}\",\"Condition\":{\"StringEquals\":{\"AWS:SourceOwner\":\"${AWS::AccountId}\"}}},{\"Sid\":\"__console_pub_0\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"*\"},\"Action\":\"SNS:Publish\",\"Resource\":\"${SNSTopic}\"},{\"Sid\":\"__console_sub_0\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"*\"},\"Action\":\"SNS:Subscribe\",\"Resource\":\"${SNSTopic}\"}]}"
            Topics: 
              - !Ref SNSTopic

    SNSSubscription:
        Type: "AWS::SNS::Subscription"
        Properties:
            TopicArn: !Ref SNSTopic
            Endpoint: !Ref SQSQueue
            Protocol: "sqs"
            RawMessageDelivery: "true"
            Region: !Ref AWS::Region

    SQSQueue:
        Type: "AWS::SQS::Queue"
        Properties:
            DelaySeconds: "0"
            MaximumMessageSize: "262144"
            MessageRetentionPeriod: "3000"
            ReceiveMessageWaitTimeSeconds: "0"
            VisibilityTimeout: "30"
            QueueName: "erjan_sqs"

    SQSQueuePolicy:
        Type: "AWS::SQS::QueuePolicy"
        Properties:
            PolicyDocument: !Sub "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"__owner_statement\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::${AWS::AccountId}:root\"},\"Action\":\"SQS:*\",\"Resource\":\"${SQSQueue}\"},{\"Sid\":\"__consb_0\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"*\"},\"Action\":\"SQS:SendMessage\",\"Resource\":\"${SQSQueue}\",\"Condition\":{\"ArnLike\":{\"aws:SourceArn\":\"${SNSTopic}\"}}}]}"
            Queues: 
              - !Sub "https://sqs.${AWS::Region}.amazonaws.com/${AWS::AccountId}/${SQSQueue.QueueName}"

    IAMRole:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/service-role/"
            RoleName: !Sub "${LambdaFunction3}-role-z6z0brhg"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - !Sub "arn:aws:iam::${AWS::AccountId}:policy/${LambdaFunction3}-backend-can-send-to-sns"
              - !Ref IAMManagedPolicy30
              - !Ref IAMManagedPolicy11

    IAMRole2:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/service-role/"
            RoleName: !Sub "${LambdaFunction3}-role-tiym3gs8"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - !Ref IAMManagedPolicy4
              - !Ref IAMManagedPolicy20
              - !Ref IAMManagedPolicy6

    IAMRole3:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/service-role/"
            RoleName: "vote-processor-lambda-role-e24bg9zn"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - !Ref IAMManagedPolicy24
              - !Ref IAMManagedPolicy12
              - !Ref IAMManagedPolicy13

    IAMRole4:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/service-role/"
            RoleName: !Sub "${LambdaFunction}-role-wkp1altf"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - !Ref IAMManagedPolicy24
              - !Ref IAMManagedPolicy10
              - !Ref IAMManagedPolicy12

    IAMRole5:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/service-role/"
            RoleName: !Sub "${LambdaFunction}_ec2-role-6r4x3dcf"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - !Ref IAMManagedPolicy24
              - !Ref IAMManagedPolicy12
              - !Ref IAMManagedPolicy15

    IAMRole6:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/service-role/"
            RoleName: "StepFunctions-MyStateMachine-erjan-role-6eae5546"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"states.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600

    IAMRole7:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/service-role/"
            RoleName: !Sub "${LambdaFunction2}-role-cs7bdnlc"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - !Ref IAMManagedPolicy34
              - !Ref IAMManagedPolicy8
              - !Ref IAMManagedPolicy30
              - "arn:aws:iam::aws:policy/AWSLambdaInvocation-DynamoDB"
              - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"

    IAMRole8:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/service-role/"
            RoleName: !Sub "${LambdaFunction2}-role-9stwb69a"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - !Ref IAMManagedPolicy23

    IAMRole9:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/service-role/"
            RoleName: "resize-image-kenjegalee-role-hjqux1sq"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - !Ref IAMManagedPolicy2

    IAMRole10:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/service-role/"
            RoleName: "plus_function-role-ivmmvc6n"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - !Ref IAMManagedPolicy14

    IAMRole11:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/service-role/"
            RoleName: "myfirstlambda-role-dw1wdtsu"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - !Ref IAMManagedPolicy18
              - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"

    IAMRole12:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/service-role/"
            RoleName: "minus_function-role-dxfsvomc"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - !Ref IAMManagedPolicy33

    IAMRole13:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/service-role/"
            RoleName: "get-eni-role-inrlh98e"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - !Ref IAMManagedPolicy31
              - !Sub "arn:aws:iam::${AWS::AccountId}:policy/get-eni-lambda"

    IAMRole14:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/service-role/"
            RoleName: "for_api-role-qvqsvvxs"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - !Ref IAMManagedPolicy19

    IAMRole15:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/service-role/"
            RoleName: "dynamo-test-role-fz3pg5kc"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - !Ref IAMManagedPolicy19
              - !Ref IAMManagedPolicy33
              - !Ref IAMManagedPolicy2
              - !Ref IAMManagedPolicy28
              - !Ref IAMManagedPolicy34
              - !Sub "arn:aws:iam::${AWS::AccountId}:policy/${DynamoDBTable}-test-dynamodb-lambda-get-item-policy"
              - !Ref IAMManagedPolicy31
              - !Ref IAMManagedPolicy11
              - !Ref IAMManagedPolicy18

    IAMRole16:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/service-role/"
            RoleName: "aws-codestar-service-role"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"codestar.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - "arn:aws:iam::aws:policy/service-role/AWSCodeStarServiceRole"

    IAMRole17:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "voting_role"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - !Ref IAMManagedPolicy
              - !Ref IAMManagedPolicy9

    IAMRole18:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "vote_processor_lambda_iam_role"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - !Ref IAMManagedPolicy3
              - !Ref IAMManagedPolicy17
              - !Ref IAMManagedPolicy7

    IAMRole19:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "result_lambda_iam_role"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - !Ref IAMManagedPolicy29
              - !Ref IAMManagedPolicy5

    IAMRole20:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "rds-monitoring-role"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"monitoring.rds.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - "arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole"

    IAMRole21:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "CodeStarWorker-erjan-code-star-ToolChain"
            AssumeRolePolicyDocument: "{\"Version\":\"2008-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":[\"elasticbeanstalk.amazonaws.com\",\"codebuild.amazonaws.com\",\"codepipeline.amazonaws.com\",\"codedeploy.amazonaws.com\",\"events.amazonaws.com\",\"lambda.amazonaws.com\",\"codestar.amazonaws.com\"]},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - "arn:aws:iam::aws:policy/AWSCodeStarFullAccess"
              - "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess"
              - "arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess"
              - "arn:aws:iam::aws:policy/AWSCodeCommitFullAccess"
              - "arn:aws:iam::aws:policy/AWSCodeDeployFullAccess"
              - "arn:aws:iam::aws:policy/CloudWatchEventsFullAccess"
              - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
              - "arn:aws:iam::aws:policy/AdministratorAccess-AWSElasticBeanstalk"
              - "arn:aws:iam::aws:policy/AWSCodePipeline_FullAccess"
              - "arn:aws:iam::aws:policy/AWSLambda_FullAccess"
            Description: ""

    IAMRole22:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "CodeStarWorker-erjan-code-star-CodeDeploy"
            AssumeRolePolicyDocument: "{\"Version\":\"2008-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"codedeploy.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRoleForLambda"
            Description: ""

    IAMRole23:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "CodeStarWorker-erjan-code-star-CloudFormation"
            AssumeRolePolicyDocument: "{\"Version\":\"2008-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"cloudformation.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            Description: ""

    IAMRole24:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "aws-opsworks-service-role"
            AssumeRolePolicyDocument: "{\"Version\":\"2008-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"opsworks.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600

    IAMRole25:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "aws-elasticbeanstalk-service-role"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"elasticbeanstalk.amazonaws.com\"},\"Action\":\"sts:AssumeRole\",\"Condition\":{\"StringEquals\":{\"sts:ExternalId\":\"elasticbeanstalk\"}}}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - "arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkEnhancedHealth"
              - "arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkService"

    IAMRole26:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "aws-elasticbeanstalk-ec2-role"
            AssumeRolePolicyDocument: "{\"Version\":\"2008-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"ec2.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - "arn:aws:iam::aws:policy/AWSElasticBeanstalkMulticontainerDocker"
              - "arn:aws:iam::aws:policy/AWSElasticBeanstalkWebTier"
              - "arn:aws:iam::aws:policy/AWSElasticBeanstalkWorkerTier"

    IAMRole27:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "aws-ec2-spot-fleet-tagging-role"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"spotfleet.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - "arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole"

    IAMRole28:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "sqs_apigateway_role"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"apigateway.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
              - "arn:aws:iam::aws:policy/AmazonSQSFullAccess"
            Description: "Allows API Gateway to push logs to CloudWatch Logs."

    IAMRole29:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "s3-erjan"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"s3.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - "arn:aws:iam::aws:policy/TranslateReadOnly"
              - "arn:aws:iam::aws:policy/TranslateFullAccess"
            Description: "Allows S3 to call AWS services on your behalf."

    IAMRole30:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "vote-processor-ec2-role"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"ec2.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - !Ref IAMManagedPolicy24
              - !Ref IAMManagedPolicy12
            Description: "vote processor can receive from sqs and send messages to dynamodb"

    IAMManagedPolicy:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "vote_lambda_policy_send_to_sns"
            Path: "/"
            PolicyDocument: !Sub "{\"Statement\":[{\"Action\":\"sns:Publish\",\"Effect\":\"Allow\",\"Resource\":\"${SNSTopic}\",\"Sid\":\"\"}],\"Version\":\"2012-10-17\"}"

    IAMManagedPolicy2:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "AWSLambdaBasicExecutionRole-26905855-e012-4435-a907-3405124b0309"
            Path: "/service-role/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": "logs:CreateLogGroup",
                            "Resource": "arn:aws:logs:us-east-1:${AWS::AccountId}:*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Resource": [
                                "arn:aws:logs:us-east-1:${AWS::AccountId}:log-group:/aws/lambda/resize-image-kenjegalee:*"
                            ]
                        }
                    ]
                }

    IAMManagedPolicy3:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "vote_processor_dynamodb_policy"
            Path: "/"
            PolicyDocument: !Sub "{\"Statement\":[{\"Action\":[\"dynamodb:PutItem\",\"dynamodb:UpdateItem\",\"dynamodb:Get*\",\"dynamodb:Query\",\"dynamodb:Scan\",\"dynamodb:BatchWrite*\",\"dynamodb:CreateTable\",\"dynamodb:Delete*\"],\"Effect\":\"Allow\",\"Resource\":\"arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTable}\",\"Sid\":\"VisualEditor0\"}],\"Version\":\"2012-10-17\"}"

    IAMManagedPolicy4:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "AWSLambdaBasicExecutionRole-b4e0f21f-4840-4bfa-b6e1-e0f9b62c73c7"
            Path: "/service-role/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": "logs:CreateLogGroup",
                            "Resource": "arn:aws:logs:us-east-1:${AWS::AccountId}:*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Resource": [
                                "arn:aws:logs:us-east-1:${AWS::AccountId}:log-group:/aws/lambda/${LambdaFunction3}:*"
                            ]
                        }
                    ]
                }

    IAMManagedPolicy5:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "result_log_policy"
            Path: "/"
            PolicyDocument: "{\"Statement\":[{\"Action\":[\"logs:CreateLogGroup\",\"logs:CreateLogStream\",\"logs:PutLogEvents\"],\"Effect\":\"Allow\",\"Resource\":\"arn:aws:logs:*:*:*\"}],\"Version\":\"2012-10-17\"}"

    IAMManagedPolicy6:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "AWSLambdaVPCAccessExecutionRole-3a7912c6-f863-4299-b9d1-3a29dd14736e"
            Path: "/service-role/"
            PolicyDocument: |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "ec2:CreateNetworkInterface",
                                "ec2:DeleteNetworkInterface",
                                "ec2:DescribeNetworkInterfaces"
                            ],
                            "Resource": "*"
                        }
                    ]
                }

    IAMManagedPolicy7:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "vote_processor_sqs_policy"
            Path: "/"
            PolicyDocument: !Sub "{\"Statement\":[{\"Action\":[\"sqs:DeleteMessage\",\"sqs:GetQueueUrl\",\"sqs:ReceiveMessage\"],\"Effect\":\"Allow\",\"Resource\":\"${SQSQueue}\",\"Sid\":\"VisualEditor0\"},{\"Action\":[\"sqs:GetQueueAttributes\",\"sqs:ReceiveMessage\"],\"Effect\":\"Allow\",\"Resource\":\"${SQSQueue}\",\"Sid\":\"VisualEditor1\"}],\"Version\":\"2012-10-17\"}"

    IAMManagedPolicy8:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "AWSLambdaBasicExecutionRole-dbca2dcf-f8e8-49d6-bb7c-5ff50e1c8cef"
            Path: "/service-role/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": "logs:CreateLogGroup",
                            "Resource": "arn:aws:logs:us-east-1:${AWS::AccountId}:*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Resource": [
                                "arn:aws:logs:us-east-1:${AWS::AccountId}:log-group:/aws/lambda/${LambdaFunction2}:*"
                            ]
                        }
                    ]
                }

    IAMManagedPolicy9:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "log_policy"
            Path: "/"
            PolicyDocument: "{\"Statement\":[{\"Action\":[\"logs:CreateLogGroup\",\"logs:CreateLogStream\",\"logs:PutLogEvents\"],\"Effect\":\"Allow\",\"Resource\":\"arn:aws:logs:*:*:*\"}],\"Version\":\"2012-10-17\"}"

    IAMManagedPolicy10:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "AWSLambdaBasicExecutionRole-7697ed58-18c1-4005-8d2f-e076d52e2ba9"
            Path: "/service-role/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": "logs:CreateLogGroup",
                            "Resource": "arn:aws:logs:us-east-1:${AWS::AccountId}:*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Resource": [
                                "arn:aws:logs:us-east-1:${AWS::AccountId}:log-group:/aws/lambda/${LambdaFunction}:*"
                            ]
                        }
                    ]
                }

    IAMManagedPolicy11:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "AWSLambdaBasicExecutionRole-427c92eb-1f05-4b19-b56b-5a9a21c52886"
            Path: "/service-role/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": "logs:CreateLogGroup",
                            "Resource": "arn:aws:logs:us-east-1:${AWS::AccountId}:*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Resource": [
                                "arn:aws:logs:us-east-1:${AWS::AccountId}:log-group:/aws/lambda/${LambdaFunction3}:*"
                            ]
                        }
                    ]
                }

    IAMManagedPolicy12:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "ec2-can-access-sqs"
            Path: "/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Sid": "VisualEditor0",
                            "Effect": "Allow",
                            "Action": [
                                "sqs:DeleteMessage",
                                "sqs:GetQueueUrl",
                                "sqs:ReceiveMessage"
                            ],
                            "Resource": "arn:aws:sqs:us-east-1:${AWS::AccountId}:erjan"
                        },
                        {
                            "Sid": "VisualEditor1",
                            "Effect": "Allow",
                            "Action": "sqs:GetQueueAttributes",
                            "Resource": "arn:aws:sqs:us-east-1:${AWS::AccountId}:erjan"
                        }
                    ]
                }

    IAMManagedPolicy13:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "AWSLambdaBasicExecutionRole-ec87e0f3-38f6-4b37-9a51-763c7d216b4a"
            Path: "/service-role/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": "logs:CreateLogGroup",
                            "Resource": "arn:aws:logs:us-east-1:${AWS::AccountId}:*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Resource": [
                                "arn:aws:logs:us-east-1:${AWS::AccountId}:log-group:/aws/lambda/vote-processor-lambda:*"
                            ]
                        }
                    ]
                }

    IAMManagedPolicy14:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "AWSLambdaBasicExecutionRole-d07999a0-6ee7-4384-ac75-e3c5b682a153"
            Path: "/service-role/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": "logs:CreateLogGroup",
                            "Resource": "arn:aws:logs:us-east-1:${AWS::AccountId}:*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Resource": [
                                "arn:aws:logs:us-east-1:${AWS::AccountId}:log-group:/aws/lambda/plus_function:*"
                            ]
                        }
                    ]
                }

    IAMManagedPolicy15:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "AWSLambdaBasicExecutionRole-6cc57b7a-0289-4b56-a380-d0731b195cf5"
            Path: "/service-role/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": "logs:CreateLogGroup",
                            "Resource": "arn:aws:logs:us-east-1:${AWS::AccountId}:*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Resource": [
                                "arn:aws:logs:us-east-1:${AWS::AccountId}:log-group:/aws/lambda/${LambdaFunction}_ec2:*"
                            ]
                        }
                    ]
                }

    IAMManagedPolicy16:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "AWSLambdaBasicExecutionRole-5c8ddfeb-8c1d-41ce-b42f-e10506fc1219"
            Path: "/service-role/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": "logs:CreateLogGroup",
                            "Resource": "arn:aws:logs:us-east-1:${AWS::AccountId}:*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Resource": [
                                "arn:aws:logs:us-east-1:${AWS::AccountId}:log-group:/aws/lambda/kkk:*"
                            ]
                        }
                    ]
                }

    IAMManagedPolicy17:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "vote_processor_log_policy"
            Path: "/"
            PolicyDocument: "{\"Statement\":[{\"Action\":[\"logs:CreateLogGroup\",\"logs:CreateLogStream\",\"logs:PutLogEvents\"],\"Effect\":\"Allow\",\"Resource\":\"arn:aws:logs:*:*:*\"}],\"Version\":\"2012-10-17\"}"

    IAMManagedPolicy18:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "AWSLambdaBasicExecutionRole-32cd3b94-1519-41a7-8d80-3fcae0e73048"
            Path: "/service-role/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": "logs:CreateLogGroup",
                            "Resource": "arn:aws:logs:us-east-1:${AWS::AccountId}:*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Resource": [
                                "arn:aws:logs:us-east-1:${AWS::AccountId}:log-group:/aws/lambda/myfirstlambda:*"
                            ]
                        }
                    ]
                }

    IAMManagedPolicy19:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "AWSLambdaBasicExecutionRole-27dc851a-5f74-4cc2-9e6e-794f817ad711"
            Path: "/service-role/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": "logs:CreateLogGroup",
                            "Resource": "arn:aws:logs:us-east-1:${AWS::AccountId}:*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Resource": [
                                "arn:aws:logs:us-east-1:${AWS::AccountId}:log-group:/aws/lambda/for_api:*"
                            ]
                        }
                    ]
                }

    IAMManagedPolicy20:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "AWSLambdaSNSTopicDestinationExecutionRole-b1f9acb5-8c51-4416-9acd-2a62c7d445fc"
            Path: "/service-role/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": "sns:Publish",
                            "Resource": "arn:aws:sns:us-east-1:${AWS::AccountId}:erjan"
                        }
                    ]
                }

    IAMManagedPolicy21:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: !Sub "${LambdaFunction3}-backend-can-send-to-sns"
            Path: "/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "sns:Publish"
                            ],
                            "Resource": "arn:aws:sns:us-east-1:${AWS::AccountId}:erjan"
                        }
                    ]
                }

    IAMManagedPolicy22:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: !Sub "${DynamoDBTable}-test-dynamodb-lambda-get-item-policy"
            Path: "/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Sid": "VisualEditor0",
                            "Effect": "Allow",
                            "Action": [
                                "dynamodb:DeleteItem",
                                "dynamodb:GetShardIterator",
                                "dynamodb:GetItem",
                                "dynamodb:DescribeStream",
                                "dynamodb:GetRecords"
                            ],
                            "Resource": "arn:aws:dynamodb:us-east-1:${AWS::AccountId}:table/${DynamoDBTable}-test"
                        }
                    ]
                }

    IAMManagedPolicy23:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "AWSLambdaBasicExecutionRole-ef86603b-1836-4eef-91cd-d1cb8be35673"
            Path: "/service-role/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": "logs:CreateLogGroup",
                            "Resource": "arn:aws:logs:us-east-1:${AWS::AccountId}:*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Resource": [
                                "arn:aws:logs:us-east-1:${AWS::AccountId}:log-group:/aws/lambda/${LambdaFunction2}:*"
                            ]
                        }
                    ]
                }

    IAMManagedPolicy24:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "ec2-can-access-dynamodb"
            Path: "/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Sid": "VisualEditor0",
                            "Effect": "Allow",
                            "Action": [
                                "dynamodb:PutItem",
                                "dynamodb:UpdateItem",
                                "dynamodb:Get*",
                                "dynamodb:Query",
                                "dynamodb:Scan",
                                "dynamodb:BatchWrite*",
                                "dynamodb:CreateTable",
                                "dynamodb:Delete*"
                                
                            ],
                            "Resource": "arn:aws:dynamodb:us-east-1:${AWS::AccountId}:table/Votes"
                        }
                    ]
                }

    IAMManagedPolicy25:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "AmazonTranslateServicePolicy-d565"
            Path: "/service-role/"
            PolicyDocument: |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Action": [
                                "s3:GetObject"
                            ],
                            "Resource": [
                                "arn:aws:s3:::book-traidor/*",
                                "arn:aws:s3:::rus-traidor/*"
                            ],
                            "Effect": "Allow"
                        },
                        {
                            "Action": [
                                "s3:ListBucket"
                            ],
                            "Resource": [
                                "arn:aws:s3:::book-traidor",
                                "arn:aws:s3:::rus-traidor"
                            ],
                            "Effect": "Allow"
                        },
                        {
                            "Action": [
                                "s3:PutObject"
                            ],
                            "Resource": [
                                "arn:aws:s3:::rus-traidor/*"
                            ],
                            "Effect": "Allow"
                        }
                    ]
                }

    IAMManagedPolicy26:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: !Sub "dynamodb_access_${DynamoDBTable}"
            Path: "/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "dynamodb:PutItem",
                                "dynamodb:UpdateItem"
                            ],
                            "Resource": "arn:aws:dynamodb:us-east-1:${AWS::AccountId}:table/Votes"
                        }
                    ]
                }

    IAMManagedPolicy27:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "AmazonTranslateServicePolicy-lll898"
            Path: "/service-role/"
            PolicyDocument: |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Action": [
                                "s3:GetObject"
                            ],
                            "Resource": [
                                "arn:aws:s3:::book-traidor/*",
                                "arn:aws:s3:::eng-version-of-traidor/*"
                            ],
                            "Effect": "Allow"
                        },
                        {
                            "Action": [
                                "s3:ListBucket"
                            ],
                            "Resource": [
                                "arn:aws:s3:::book-traidor",
                                "arn:aws:s3:::eng-version-of-traidor"
                            ],
                            "Effect": "Allow"
                        },
                        {
                            "Action": [
                                "s3:PutObject"
                            ],
                            "Resource": [
                                "arn:aws:s3:::eng-version-of-traidor/*"
                            ],
                            "Effect": "Allow"
                        }
                    ]
                }

    IAMManagedPolicy28:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "AWSLambdaBasicExecutionRole-779d187d-f05e-4aa6-938e-b55abe9e4f3e"
            Path: "/service-role/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": "logs:CreateLogGroup",
                            "Resource": "arn:aws:logs:us-east-1:${AWS::AccountId}:*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Resource": [
                                "arn:aws:logs:us-east-1:${AWS::AccountId}:log-group:/aws/lambda/dynamo-test:*"
                            ]
                        }
                    ]
                }

    IAMManagedPolicy29:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "result_dynamodb_get_item_policy"
            Path: "/"
            PolicyDocument: !Sub "{\"Statement\":[{\"Action\":[\"dynamodb:DeleteItem\",\"dynamodb:GetShardIterator\",\"dynamodb:GetItem\",\"dynamodb:DescribeStream\",\"dynamodb:GetRecords\"],\"Effect\":\"Allow\",\"Resource\":\"arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTable}\",\"Sid\":\"VisualEditor0\"}],\"Version\":\"2012-10-17\"}"

    IAMManagedPolicy30:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "AWSLambdaVPCAccessExecutionRole-716e4420-886d-452b-a2b9-d916cd7edcde"
            Path: "/service-role/"
            PolicyDocument: |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "ec2:CreateNetworkInterface",
                                "ec2:DeleteNetworkInterface",
                                "ec2:DescribeNetworkInterfaces"
                            ],
                            "Resource": "*"
                        }
                    ]
                }

    IAMManagedPolicy31:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "AWSLambdaBasicExecutionRole-19152c4b-5711-4f72-a9b0-c578d84c81da"
            Path: "/service-role/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": "logs:CreateLogGroup",
                            "Resource": "arn:aws:logs:us-east-1:${AWS::AccountId}:*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Resource": [
                                "arn:aws:logs:us-east-1:${AWS::AccountId}:log-group:/aws/lambda/get-eni:*"
                            ]
                        }
                    ]
                }

    IAMManagedPolicy32:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "sqs-erjan-my-vote"
            Path: "/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "sqs:GetQueueUrl",
                                "sqs:ReceiveMessage",
                                "sqs:DeleteMessage"
                            ],
                            "Resource": "arn:aws:sqs:us-east-1:${AWS::AccountId}:erjan"
                        }
                    ]
                }

    IAMManagedPolicy33:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "AWSLambdaBasicExecutionRole-11a4185b-0651-4c79-a8d6-21d5a2d6d0f8"
            Path: "/service-role/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": "logs:CreateLogGroup",
                            "Resource": "arn:aws:logs:us-east-1:${AWS::AccountId}:*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Resource": [
                                "arn:aws:logs:us-east-1:${AWS::AccountId}:log-group:/aws/lambda/minus_function:*"
                            ]
                        }
                    ]
                }

    IAMManagedPolicy34:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "lambda_invoke_dynamodb_get_item"
            Path: "/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Sid": "VisualEditor0",
                            "Effect": "Allow",
                            "Action": [
                                "dynamodb:DeleteItem",
                                "dynamodb:GetShardIterator",
                                "dynamodb:GetItem",
                                "dynamodb:DescribeStream",
                                "dynamodb:GetRecords"
                            ],
                            "Resource": "arn:aws:dynamodb:us-east-1:${AWS::AccountId}:table/Votes"
                        }
                    ]
                }

